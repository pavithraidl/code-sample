/**
 * Session Authorization Controller
 * ---------------------------------------------------------------------------------------------------------------------
 * @description This controller is responsible for handling the session authorization requests. Every user should have a session
 * - token to access the api server. The session token is generated by the clientuid and secret. The clientuid and
 * - secret are pre-generated and stored in the auth_clients table. User should send the clientuid and secret to the
 * - api server to get the session token. This should be done over front-end's server side. The secret should
 * - not expose to the frontend. Frontend should only use the session token and clientUid to access the application.
 */
import AuthSession from 'App/Models/Auth/AuthSession';
import BaseController from 'App/Controllers/Http/BaseController';

export default class AuthSessionsController extends BaseController{
  /**
   * Get a session auth token
   *
   * @param request: {body: {secret: string, currentSessionToken?: string | null}, headers: {clientuid: string}}
   */
  public async getToken ({request}) {
    const {clientuid} = request.headers();
    const {secret} = request.body();
    const {currentSessionToken} = request.body();

    // Check if the clientuid and secret are provided
    if (!clientuid || !secret) {
      return this.sendResponse({error: 'Forbidden!'}, 403);
    }

    // Run the refresh token method if the current session token is provided
    if (currentSessionToken) {
      const checkCurrentSessionTokenExists = await AuthSession.query().where('token', currentSessionToken).first();
      if (!checkCurrentSessionTokenExists) {
        return this.sendResponse({error: 'Forbidden!'}, 403);
      }
    }

    // Create a new session token and return it
    const tokenData = await AuthSession.createToken(clientuid, secret);
    return this.sendResponse(tokenData);
  }
}
